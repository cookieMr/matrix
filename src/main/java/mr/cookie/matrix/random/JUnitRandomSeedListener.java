package mr.cookie.matrix.random;

import org.jetbrains.annotations.NotNull;
import org.junit.platform.launcher.TestExecutionListener;
import org.junit.platform.launcher.TestIdentifier;

import java.util.Optional;

/**
 * An implementation of JUnit's {@link TestExecutionListener} which resets {@link Random} seed before
 * each JUnit tests to the same value. The seed value is either specified by input parameter
 * {@code -Dseed=long_value} or is generated from {@link Random#nextLong()}.
 * <p/>
 * NOTE: Each {@code @RepeatedTest} will have the same random see, thus it will run with the
 * same data, which defeats the purpose of running such repeated tests while this listener is registered.
 * <p/>
 * This listener needs to be registered in {@code META-INF/services/org.junit.platform.launcher.TestExecutionListener}
 * file.
 */
public class JUnitRandomSeedListener implements TestExecutionListener {

    /**
     * The seed for pseudorandom generator. It's either taken from an application input parameter
     * {@code -Dseed=long_value} or generated by {@link Random#nextLong()}.
     */
    private static final long SEED = Optional.ofNullable(System.getProperty("seed", null))
            .map(Long::valueOf)
            .orElse(Random.nextLong());

    /**
     * Resets the random see in {@link Random} before each JUnit test. Each test is expected to have a different seed,
     * so that the same (repeated) test won't get the same random data.
     *
     * @param testIdentifier a test identifier (unused in this invocation)
     */
    @Override
    public void executionStarted(@NotNull TestIdentifier testIdentifier) {
        // TODO proper logging
        System.out.println(String.format("Test [%s] will be run with a seed [%d]",
                testIdentifier.getDisplayName(), SEED));

        Random.setSeed(SEED);
    }

}
